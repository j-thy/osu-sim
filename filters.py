# Precalculated date ranges for years 2007-2040 and all months
# Format: DATE_RANGES[key] = (start_date, end_date)
# For YYYY keys: full year range
# For YYYY-MM keys: full month range (accounting for leap years)
DATE_RANGES = {
    # Years
    '2007': ('2007-01-01', '2007-12-31'), '2008': ('2008-01-01', '2008-12-31'), '2009': ('2009-01-01', '2009-12-31'),
    '2010': ('2010-01-01', '2010-12-31'), '2011': ('2011-01-01', '2011-12-31'), '2012': ('2012-01-01', '2012-12-31'),
    '2013': ('2013-01-01', '2013-12-31'), '2014': ('2014-01-01', '2014-12-31'), '2015': ('2015-01-01', '2015-12-31'),
    '2016': ('2016-01-01', '2016-12-31'), '2017': ('2017-01-01', '2017-12-31'), '2018': ('2018-01-01', '2018-12-31'),
    '2019': ('2019-01-01', '2019-12-31'), '2020': ('2020-01-01', '2020-12-31'), '2021': ('2021-01-01', '2021-12-31'),
    '2022': ('2022-01-01', '2022-12-31'), '2023': ('2023-01-01', '2023-12-31'), '2024': ('2024-01-01', '2024-12-31'),
    '2025': ('2025-01-01', '2025-12-31'), '2026': ('2026-01-01', '2026-12-31'), '2027': ('2027-01-01', '2027-12-31'),
    '2028': ('2028-01-01', '2028-12-31'), '2029': ('2029-01-01', '2029-12-31'), '2030': ('2030-01-01', '2030-12-31'),
    '2031': ('2031-01-01', '2031-12-31'), '2032': ('2032-01-01', '2032-12-31'), '2033': ('2033-01-01', '2033-12-31'),
    '2034': ('2034-01-01', '2034-12-31'), '2035': ('2035-01-01', '2035-12-31'), '2036': ('2036-01-01', '2036-12-31'),
    '2037': ('2037-01-01', '2037-12-31'), '2038': ('2038-01-01', '2038-12-31'), '2039': ('2039-01-01', '2039-12-31'),
    '2040': ('2040-01-01', '2040-12-31'),
    # 2007 months
    '2007-01': ('2007-01-01', '2007-01-31'), '2007-02': ('2007-02-01', '2007-02-28'), '2007-03': ('2007-03-01', '2007-03-31'),
    '2007-04': ('2007-04-01', '2007-04-30'), '2007-05': ('2007-05-01', '2007-05-31'), '2007-06': ('2007-06-01', '2007-06-30'),
    '2007-07': ('2007-07-01', '2007-07-31'), '2007-08': ('2007-08-01', '2007-08-31'), '2007-09': ('2007-09-01', '2007-09-30'),
    '2007-10': ('2007-10-01', '2007-10-31'), '2007-11': ('2007-11-01', '2007-11-30'), '2007-12': ('2007-12-01', '2007-12-31'),
    # 2008 months (leap year)
    '2008-01': ('2008-01-01', '2008-01-31'), '2008-02': ('2008-02-01', '2008-02-29'), '2008-03': ('2008-03-01', '2008-03-31'),
    '2008-04': ('2008-04-01', '2008-04-30'), '2008-05': ('2008-05-01', '2008-05-31'), '2008-06': ('2008-06-01', '2008-06-30'),
    '2008-07': ('2008-07-01', '2008-07-31'), '2008-08': ('2008-08-01', '2008-08-31'), '2008-09': ('2008-09-01', '2008-09-30'),
    '2008-10': ('2008-10-01', '2008-10-31'), '2008-11': ('2008-11-01', '2008-11-30'), '2008-12': ('2008-12-01', '2008-12-31'),
    # 2009 months
    '2009-01': ('2009-01-01', '2009-01-31'), '2009-02': ('2009-02-01', '2009-02-28'), '2009-03': ('2009-03-01', '2009-03-31'),
    '2009-04': ('2009-04-01', '2009-04-30'), '2009-05': ('2009-05-01', '2009-05-31'), '2009-06': ('2009-06-01', '2009-06-30'),
    '2009-07': ('2009-07-01', '2009-07-31'), '2009-08': ('2009-08-01', '2009-08-31'), '2009-09': ('2009-09-01', '2009-09-30'),
    '2009-10': ('2009-10-01', '2009-10-31'), '2009-11': ('2009-11-01', '2009-11-30'), '2009-12': ('2009-12-01', '2009-12-31'),
    # 2010 months
    '2010-01': ('2010-01-01', '2010-01-31'), '2010-02': ('2010-02-01', '2010-02-28'), '2010-03': ('2010-03-01', '2010-03-31'),
    '2010-04': ('2010-04-01', '2010-04-30'), '2010-05': ('2010-05-01', '2010-05-31'), '2010-06': ('2010-06-01', '2010-06-30'),
    '2010-07': ('2010-07-01', '2010-07-31'), '2010-08': ('2010-08-01', '2010-08-31'), '2010-09': ('2010-09-01', '2010-09-30'),
    '2010-10': ('2010-10-01', '2010-10-31'), '2010-11': ('2010-11-01', '2010-11-30'), '2010-12': ('2010-12-01', '2010-12-31'),
    # 2011 months
    '2011-01': ('2011-01-01', '2011-01-31'), '2011-02': ('2011-02-01', '2011-02-28'), '2011-03': ('2011-03-01', '2011-03-31'),
    '2011-04': ('2011-04-01', '2011-04-30'), '2011-05': ('2011-05-01', '2011-05-31'), '2011-06': ('2011-06-01', '2011-06-30'),
    '2011-07': ('2011-07-01', '2011-07-31'), '2011-08': ('2011-08-01', '2011-08-31'), '2011-09': ('2011-09-01', '2011-09-30'),
    '2011-10': ('2011-10-01', '2011-10-31'), '2011-11': ('2011-11-01', '2011-11-30'), '2011-12': ('2011-12-01', '2011-12-31'),
    # 2012 months (leap year)
    '2012-01': ('2012-01-01', '2012-01-31'), '2012-02': ('2012-02-01', '2012-02-29'), '2012-03': ('2012-03-01', '2012-03-31'),
    '2012-04': ('2012-04-01', '2012-04-30'), '2012-05': ('2012-05-01', '2012-05-31'), '2012-06': ('2012-06-01', '2012-06-30'),
    '2012-07': ('2012-07-01', '2012-07-31'), '2012-08': ('2012-08-01', '2012-08-31'), '2012-09': ('2012-09-01', '2012-09-30'),
    '2012-10': ('2012-10-01', '2012-10-31'), '2012-11': ('2012-11-01', '2012-11-30'), '2012-12': ('2012-12-01', '2012-12-31'),
    # 2013 months
    '2013-01': ('2013-01-01', '2013-01-31'), '2013-02': ('2013-02-01', '2013-02-28'), '2013-03': ('2013-03-01', '2013-03-31'),
    '2013-04': ('2013-04-01', '2013-04-30'), '2013-05': ('2013-05-01', '2013-05-31'), '2013-06': ('2013-06-01', '2013-06-30'),
    '2013-07': ('2013-07-01', '2013-07-31'), '2013-08': ('2013-08-01', '2013-08-31'), '2013-09': ('2013-09-01', '2013-09-30'),
    '2013-10': ('2013-10-01', '2013-10-31'), '2013-11': ('2013-11-01', '2013-11-30'), '2013-12': ('2013-12-01', '2013-12-31'),
    # 2014 months
    '2014-01': ('2014-01-01', '2014-01-31'), '2014-02': ('2014-02-01', '2014-02-28'), '2014-03': ('2014-03-01', '2014-03-31'),
    '2014-04': ('2014-04-01', '2014-04-30'), '2014-05': ('2014-05-01', '2014-05-31'), '2014-06': ('2014-06-01', '2014-06-30'),
    '2014-07': ('2014-07-01', '2014-07-31'), '2014-08': ('2014-08-01', '2014-08-31'), '2014-09': ('2014-09-01', '2014-09-30'),
    '2014-10': ('2014-10-01', '2014-10-31'), '2014-11': ('2014-11-01', '2014-11-30'), '2014-12': ('2014-12-01', '2014-12-31'),
    # 2015 months
    '2015-01': ('2015-01-01', '2015-01-31'), '2015-02': ('2015-02-01', '2015-02-28'), '2015-03': ('2015-03-01', '2015-03-31'),
    '2015-04': ('2015-04-01', '2015-04-30'), '2015-05': ('2015-05-01', '2015-05-31'), '2015-06': ('2015-06-01', '2015-06-30'),
    '2015-07': ('2015-07-01', '2015-07-31'), '2015-08': ('2015-08-01', '2015-08-31'), '2015-09': ('2015-09-01', '2015-09-30'),
    '2015-10': ('2015-10-01', '2015-10-31'), '2015-11': ('2015-11-01', '2015-11-30'), '2015-12': ('2015-12-01', '2015-12-31'),
    # 2016 months (leap year)
    '2016-01': ('2016-01-01', '2016-01-31'), '2016-02': ('2016-02-01', '2016-02-29'), '2016-03': ('2016-03-01', '2016-03-31'),
    '2016-04': ('2016-04-01', '2016-04-30'), '2016-05': ('2016-05-01', '2016-05-31'), '2016-06': ('2016-06-01', '2016-06-30'),
    '2016-07': ('2016-07-01', '2016-07-31'), '2016-08': ('2016-08-01', '2016-08-31'), '2016-09': ('2016-09-01', '2016-09-30'),
    '2016-10': ('2016-10-01', '2016-10-31'), '2016-11': ('2016-11-01', '2016-11-30'), '2016-12': ('2016-12-01', '2016-12-31'),
    # 2017 months
    '2017-01': ('2017-01-01', '2017-01-31'), '2017-02': ('2017-02-01', '2017-02-28'), '2017-03': ('2017-03-01', '2017-03-31'),
    '2017-04': ('2017-04-01', '2017-04-30'), '2017-05': ('2017-05-01', '2017-05-31'), '2017-06': ('2017-06-01', '2017-06-30'),
    '2017-07': ('2017-07-01', '2017-07-31'), '2017-08': ('2017-08-01', '2017-08-31'), '2017-09': ('2017-09-01', '2017-09-30'),
    '2017-10': ('2017-10-01', '2017-10-31'), '2017-11': ('2017-11-01', '2017-11-30'), '2017-12': ('2017-12-01', '2017-12-31'),
    # 2018 months
    '2018-01': ('2018-01-01', '2018-01-31'), '2018-02': ('2018-02-01', '2018-02-28'), '2018-03': ('2018-03-01', '2018-03-31'),
    '2018-04': ('2018-04-01', '2018-04-30'), '2018-05': ('2018-05-01', '2018-05-31'), '2018-06': ('2018-06-01', '2018-06-30'),
    '2018-07': ('2018-07-01', '2018-07-31'), '2018-08': ('2018-08-01', '2018-08-31'), '2018-09': ('2018-09-01', '2018-09-30'),
    '2018-10': ('2018-10-01', '2018-10-31'), '2018-11': ('2018-11-01', '2018-11-30'), '2018-12': ('2018-12-01', '2018-12-31'),
    # 2019 months
    '2019-01': ('2019-01-01', '2019-01-31'), '2019-02': ('2019-02-01', '2019-02-28'), '2019-03': ('2019-03-01', '2019-03-31'),
    '2019-04': ('2019-04-01', '2019-04-30'), '2019-05': ('2019-05-01', '2019-05-31'), '2019-06': ('2019-06-01', '2019-06-30'),
    '2019-07': ('2019-07-01', '2019-07-31'), '2019-08': ('2019-08-01', '2019-08-31'), '2019-09': ('2019-09-01', '2019-09-30'),
    '2019-10': ('2019-10-01', '2019-10-31'), '2019-11': ('2019-11-01', '2019-11-30'), '2019-12': ('2019-12-01', '2019-12-31'),
    # 2020 months (leap year)
    '2020-01': ('2020-01-01', '2020-01-31'), '2020-02': ('2020-02-01', '2020-02-29'), '2020-03': ('2020-03-01', '2020-03-31'),
    '2020-04': ('2020-04-01', '2020-04-30'), '2020-05': ('2020-05-01', '2020-05-31'), '2020-06': ('2020-06-01', '2020-06-30'),
    '2020-07': ('2020-07-01', '2020-07-31'), '2020-08': ('2020-08-01', '2020-08-31'), '2020-09': ('2020-09-01', '2020-09-30'),
    '2020-10': ('2020-10-01', '2020-10-31'), '2020-11': ('2020-11-01', '2020-11-30'), '2020-12': ('2020-12-01', '2020-12-31'),
    # 2021 months
    '2021-01': ('2021-01-01', '2021-01-31'), '2021-02': ('2021-02-01', '2021-02-28'), '2021-03': ('2021-03-01', '2021-03-31'),
    '2021-04': ('2021-04-01', '2021-04-30'), '2021-05': ('2021-05-01', '2021-05-31'), '2021-06': ('2021-06-01', '2021-06-30'),
    '2021-07': ('2021-07-01', '2021-07-31'), '2021-08': ('2021-08-01', '2021-08-31'), '2021-09': ('2021-09-01', '2021-09-30'),
    '2021-10': ('2021-10-01', '2021-10-31'), '2021-11': ('2021-11-01', '2021-11-30'), '2021-12': ('2021-12-01', '2021-12-31'),
    # 2022 months
    '2022-01': ('2022-01-01', '2022-01-31'), '2022-02': ('2022-02-01', '2022-02-28'), '2022-03': ('2022-03-01', '2022-03-31'),
    '2022-04': ('2022-04-01', '2022-04-30'), '2022-05': ('2022-05-01', '2022-05-31'), '2022-06': ('2022-06-01', '2022-06-30'),
    '2022-07': ('2022-07-01', '2022-07-31'), '2022-08': ('2022-08-01', '2022-08-31'), '2022-09': ('2022-09-01', '2022-09-30'),
    '2022-10': ('2022-10-01', '2022-10-31'), '2022-11': ('2022-11-01', '2022-11-30'), '2022-12': ('2022-12-01', '2022-12-31'),
    # 2023 months
    '2023-01': ('2023-01-01', '2023-01-31'), '2023-02': ('2023-02-01', '2023-02-28'), '2023-03': ('2023-03-01', '2023-03-31'),
    '2023-04': ('2023-04-01', '2023-04-30'), '2023-05': ('2023-05-01', '2023-05-31'), '2023-06': ('2023-06-01', '2023-06-30'),
    '2023-07': ('2023-07-01', '2023-07-31'), '2023-08': ('2023-08-01', '2023-08-31'), '2023-09': ('2023-09-01', '2023-09-30'),
    '2023-10': ('2023-10-01', '2023-10-31'), '2023-11': ('2023-11-01', '2023-11-30'), '2023-12': ('2023-12-01', '2023-12-31'),
    # 2024 months (leap year)
    '2024-01': ('2024-01-01', '2024-01-31'), '2024-02': ('2024-02-01', '2024-02-29'), '2024-03': ('2024-03-01', '2024-03-31'),
    '2024-04': ('2024-04-01', '2024-04-30'), '2024-05': ('2024-05-01', '2024-05-31'), '2024-06': ('2024-06-01', '2024-06-30'),
    '2024-07': ('2024-07-01', '2024-07-31'), '2024-08': ('2024-08-01', '2024-08-31'), '2024-09': ('2024-09-01', '2024-09-30'),
    '2024-10': ('2024-10-01', '2024-10-31'), '2024-11': ('2024-11-01', '2024-11-30'), '2024-12': ('2024-12-01', '2024-12-31'),
    # 2025 months
    '2025-01': ('2025-01-01', '2025-01-31'), '2025-02': ('2025-02-01', '2025-02-28'), '2025-03': ('2025-03-01', '2025-03-31'),
    '2025-04': ('2025-04-01', '2025-04-30'), '2025-05': ('2025-05-01', '2025-05-31'), '2025-06': ('2025-06-01', '2025-06-30'),
    '2025-07': ('2025-07-01', '2025-07-31'), '2025-08': ('2025-08-01', '2025-08-31'), '2025-09': ('2025-09-01', '2025-09-30'),
    '2025-10': ('2025-10-01', '2025-10-31'), '2025-11': ('2025-11-01', '2025-11-30'), '2025-12': ('2025-12-01', '2025-12-31'),
    # 2026 months
    '2026-01': ('2026-01-01', '2026-01-31'), '2026-02': ('2026-02-01', '2026-02-28'), '2026-03': ('2026-03-01', '2026-03-31'),
    '2026-04': ('2026-04-01', '2026-04-30'), '2026-05': ('2026-05-01', '2026-05-31'), '2026-06': ('2026-06-01', '2026-06-30'),
    '2026-07': ('2026-07-01', '2026-07-31'), '2026-08': ('2026-08-01', '2026-08-31'), '2026-09': ('2026-09-01', '2026-09-30'),
    '2026-10': ('2026-10-01', '2026-10-31'), '2026-11': ('2026-11-01', '2026-11-30'), '2026-12': ('2026-12-01', '2026-12-31'),
    # 2027 months
    '2027-01': ('2027-01-01', '2027-01-31'), '2027-02': ('2027-02-01', '2027-02-28'), '2027-03': ('2027-03-01', '2027-03-31'),
    '2027-04': ('2027-04-01', '2027-04-30'), '2027-05': ('2027-05-01', '2027-05-31'), '2027-06': ('2027-06-01', '2027-06-30'),
    '2027-07': ('2027-07-01', '2027-07-31'), '2027-08': ('2027-08-01', '2027-08-31'), '2027-09': ('2027-09-01', '2027-09-30'),
    '2027-10': ('2027-10-01', '2027-10-31'), '2027-11': ('2027-11-01', '2027-11-30'), '2027-12': ('2027-12-01', '2027-12-31'),
    # 2028 months (leap year)
    '2028-01': ('2028-01-01', '2028-01-31'), '2028-02': ('2028-02-01', '2028-02-29'), '2028-03': ('2028-03-01', '2028-03-31'),
    '2028-04': ('2028-04-01', '2028-04-30'), '2028-05': ('2028-05-01', '2028-05-31'), '2028-06': ('2028-06-01', '2028-06-30'),
    '2028-07': ('2028-07-01', '2028-07-31'), '2028-08': ('2028-08-01', '2028-08-31'), '2028-09': ('2028-09-01', '2028-09-30'),
    '2028-10': ('2028-10-01', '2028-10-31'), '2028-11': ('2028-11-01', '2028-11-30'), '2028-12': ('2028-12-01', '2028-12-31'),
    # 2029 months
    '2029-01': ('2029-01-01', '2029-01-31'), '2029-02': ('2029-02-01', '2029-02-28'), '2029-03': ('2029-03-01', '2029-03-31'),
    '2029-04': ('2029-04-01', '2029-04-30'), '2029-05': ('2029-05-01', '2029-05-31'), '2029-06': ('2029-06-01', '2029-06-30'),
    '2029-07': ('2029-07-01', '2029-07-31'), '2029-08': ('2029-08-01', '2029-08-31'), '2029-09': ('2029-09-01', '2029-09-30'),
    '2029-10': ('2029-10-01', '2029-10-31'), '2029-11': ('2029-11-01', '2029-11-30'), '2029-12': ('2029-12-01', '2029-12-31'),
    # 2030 months
    '2030-01': ('2030-01-01', '2030-01-31'), '2030-02': ('2030-02-01', '2030-02-28'), '2030-03': ('2030-03-01', '2030-03-31'),
    '2030-04': ('2030-04-01', '2030-04-30'), '2030-05': ('2030-05-01', '2030-05-31'), '2030-06': ('2030-06-01', '2030-06-30'),
    '2030-07': ('2030-07-01', '2030-07-31'), '2030-08': ('2030-08-01', '2030-08-31'), '2030-09': ('2030-09-01', '2030-09-30'),
    '2030-10': ('2030-10-01', '2030-10-31'), '2030-11': ('2030-11-01', '2030-11-30'), '2030-12': ('2030-12-01', '2030-12-31'),
    # 2031 months
    '2031-01': ('2031-01-01', '2031-01-31'), '2031-02': ('2031-02-01', '2031-02-28'), '2031-03': ('2031-03-01', '2031-03-31'),
    '2031-04': ('2031-04-01', '2031-04-30'), '2031-05': ('2031-05-01', '2031-05-31'), '2031-06': ('2031-06-01', '2031-06-30'),
    '2031-07': ('2031-07-01', '2031-07-31'), '2031-08': ('2031-08-01', '2031-08-31'), '2031-09': ('2031-09-01', '2031-09-30'),
    '2031-10': ('2031-10-01', '2031-10-31'), '2031-11': ('2031-11-01', '2031-11-30'), '2031-12': ('2031-12-01', '2031-12-31'),
    # 2032 months (leap year)
    '2032-01': ('2032-01-01', '2032-01-31'), '2032-02': ('2032-02-01', '2032-02-29'), '2032-03': ('2032-03-01', '2032-03-31'),
    '2032-04': ('2032-04-01', '2032-04-30'), '2032-05': ('2032-05-01', '2032-05-31'), '2032-06': ('2032-06-01', '2032-06-30'),
    '2032-07': ('2032-07-01', '2032-07-31'), '2032-08': ('2032-08-01', '2032-08-31'), '2032-09': ('2032-09-01', '2032-09-30'),
    '2032-10': ('2032-10-01', '2032-10-31'), '2032-11': ('2032-11-01', '2032-11-30'), '2032-12': ('2032-12-01', '2032-12-31'),
    # 2033 months
    '2033-01': ('2033-01-01', '2033-01-31'), '2033-02': ('2033-02-01', '2033-02-28'), '2033-03': ('2033-03-01', '2033-03-31'),
    '2033-04': ('2033-04-01', '2033-04-30'), '2033-05': ('2033-05-01', '2033-05-31'), '2033-06': ('2033-06-01', '2033-06-30'),
    '2033-07': ('2033-07-01', '2033-07-31'), '2033-08': ('2033-08-01', '2033-08-31'), '2033-09': ('2033-09-01', '2033-09-30'),
    '2033-10': ('2033-10-01', '2033-10-31'), '2033-11': ('2033-11-01', '2033-11-30'), '2033-12': ('2033-12-01', '2033-12-31'),
    # 2034 months
    '2034-01': ('2034-01-01', '2034-01-31'), '2034-02': ('2034-02-01', '2034-02-28'), '2034-03': ('2034-03-01', '2034-03-31'),
    '2034-04': ('2034-04-01', '2034-04-30'), '2034-05': ('2034-05-01', '2034-05-31'), '2034-06': ('2034-06-01', '2034-06-30'),
    '2034-07': ('2034-07-01', '2034-07-31'), '2034-08': ('2034-08-01', '2034-08-31'), '2034-09': ('2034-09-01', '2034-09-30'),
    '2034-10': ('2034-10-01', '2034-10-31'), '2034-11': ('2034-11-01', '2034-11-30'), '2034-12': ('2034-12-01', '2034-12-31'),
    # 2035 months
    '2035-01': ('2035-01-01', '2035-01-31'), '2035-02': ('2035-02-01', '2035-02-28'), '2035-03': ('2035-03-01', '2035-03-31'),
    '2035-04': ('2035-04-01', '2035-04-30'), '2035-05': ('2035-05-01', '2035-05-31'), '2035-06': ('2035-06-01', '2035-06-30'),
    '2035-07': ('2035-07-01', '2035-07-31'), '2035-08': ('2035-08-01', '2035-08-31'), '2035-09': ('2035-09-01', '2035-09-30'),
    '2035-10': ('2035-10-01', '2035-10-31'), '2035-11': ('2035-11-01', '2035-11-30'), '2035-12': ('2035-12-01', '2035-12-31'),
    # 2036 months (leap year)
    '2036-01': ('2036-01-01', '2036-01-31'), '2036-02': ('2036-02-01', '2036-02-29'), '2036-03': ('2036-03-01', '2036-03-31'),
    '2036-04': ('2036-04-01', '2036-04-30'), '2036-05': ('2036-05-01', '2036-05-31'), '2036-06': ('2036-06-01', '2036-06-30'),
    '2036-07': ('2036-07-01', '2036-07-31'), '2036-08': ('2036-08-01', '2036-08-31'), '2036-09': ('2036-09-01', '2036-09-30'),
    '2036-10': ('2036-10-01', '2036-10-31'), '2036-11': ('2036-11-01', '2036-11-30'), '2036-12': ('2036-12-01', '2036-12-31'),
    # 2037 months
    '2037-01': ('2037-01-01', '2037-01-31'), '2037-02': ('2037-02-01', '2037-02-28'), '2037-03': ('2037-03-01', '2037-03-31'),
    '2037-04': ('2037-04-01', '2037-04-30'), '2037-05': ('2037-05-01', '2037-05-31'), '2037-06': ('2037-06-01', '2037-06-30'),
    '2037-07': ('2037-07-01', '2037-07-31'), '2037-08': ('2037-08-01', '2037-08-31'), '2037-09': ('2037-09-01', '2037-09-30'),
    '2037-10': ('2037-10-01', '2037-10-31'), '2037-11': ('2037-11-01', '2037-11-30'), '2037-12': ('2037-12-01', '2037-12-31'),
    # 2038 months
    '2038-01': ('2038-01-01', '2038-01-31'), '2038-02': ('2038-02-01', '2038-02-28'), '2038-03': ('2038-03-01', '2038-03-31'),
    '2038-04': ('2038-04-01', '2038-04-30'), '2038-05': ('2038-05-01', '2038-05-31'), '2038-06': ('2038-06-01', '2038-06-30'),
    '2038-07': ('2038-07-01', '2038-07-31'), '2038-08': ('2038-08-01', '2038-08-31'), '2038-09': ('2038-09-01', '2038-09-30'),
    '2038-10': ('2038-10-01', '2038-10-31'), '2038-11': ('2038-11-01', '2038-11-30'), '2038-12': ('2038-12-01', '2038-12-31'),
    # 2039 months
    '2039-01': ('2039-01-01', '2039-01-31'), '2039-02': ('2039-02-01', '2039-02-28'), '2039-03': ('2039-03-01', '2039-03-31'),
    '2039-04': ('2039-04-01', '2039-04-30'), '2039-05': ('2039-05-01', '2039-05-31'), '2039-06': ('2039-06-01', '2039-06-30'),
    '2039-07': ('2039-07-01', '2039-07-31'), '2039-08': ('2039-08-01', '2039-08-31'), '2039-09': ('2039-09-01', '2039-09-30'),
    '2039-10': ('2039-10-01', '2039-10-31'), '2039-11': ('2039-11-01', '2039-11-30'), '2039-12': ('2039-12-01', '2039-12-31'),
    # 2040 months (leap year)
    '2040-01': ('2040-01-01', '2040-01-31'), '2040-02': ('2040-02-01', '2040-02-29'), '2040-03': ('2040-03-01', '2040-03-31'),
    '2040-04': ('2040-04-01', '2040-04-30'), '2040-05': ('2040-05-01', '2040-05-31'), '2040-06': ('2040-06-01', '2040-06-30'),
    '2040-07': ('2040-07-01', '2040-07-31'), '2040-08': ('2040-08-01', '2040-08-31'), '2040-09': ('2040-09-01', '2040-09-30'),
    '2040-10': ('2040-10-01', '2040-10-31'), '2040-11': ('2040-11-01', '2040-11-30'), '2040-12': ('2040-12-01', '2040-12-31'),
}


def parse_date_to_range(date_str):
    """
    Parse a date string (YYYY, YYYY-MM, or YYYY-MM-DD) into a range.
    Uses precalculated lookup table for performance.
    Clamps invalid days to the last valid day of the month.

    Args:
        date_str: Date string in YYYY, YYYY-MM, or YYYY-MM-DD format

    Returns:
        Tuple of (start_date, end_date) as strings in YYYY-MM-DD format
    """
    # Check if it's a full date (YYYY-MM-DD)
    if date_str.count('-') == 2:
        parts = date_str.split('-')
        year, month, day = parts[0], parts[1], parts[2]
        month_int = int(month)
        day_int = int(day)

        # Clamp month to valid range (1-12)
        if month_int > 12:
            month = '12'
            month_int = 12
        elif month_int < 1:
            month = '01'
            month_int = 1

        year_month = f"{year}-{month:0>2}"  # Ensure month is zero-padded

        # Only validate day if > 28 (shortest month is February with 28 days)
        if day_int > 28:
            # Look up the valid range for this month
            if year_month in DATE_RANGES:
                _, last_valid_date = DATE_RANGES[year_month]
                last_valid_day = last_valid_date.rsplit('-', 1)[1]  # Extract last day (28/29/30/31)
                last_day_int = int(last_valid_day)

                if day_int > last_day_int:
                    # Clamp to last valid day
                    clamped_date = f"{year_month}-{last_valid_day}"
                    return (clamped_date, clamped_date)

        # Return potentially clamped month with original day
        if month != parts[1]:  # Month was clamped
            return (f"{year_month}-{day:0>2}", f"{year_month}-{day:0>2}")

        return (date_str, date_str)

    # Otherwise lookup in precalculated table
    return DATE_RANGES.get(date_str, (date_str, date_str))


def extract_sr_range(filters):
    """
    Extract SR min and max values from a list of already-parsed filters.
    Expands ranges according to operator semantics.

    Args:
        filters: List of (key, operator, value, is_string, is_date) tuples

    Returns:
        Tuple of (sr_min, sr_max) where either can be None if not constrained

    Behavior:
        - sr>=7: sr_min=7, sr_max=None
        - sr>7: sr_min=7.01, sr_max=None (strict inequality, osu! SR precision is 0.01)
        - sr<=7: sr_min=None, sr_max=7
        - sr<7: sr_min=None, sr_max=6.99 (strict inequality)
        - sr=7: sr_min=7, sr_max=7.99 (integer expands to [7, 8) range)
        - sr=7.1: sr_min=7.1, sr_max=7.19 (one decimal expands by 0.1)
        - sr=7.12: sr_min=7.12, sr_max=7.1299 (two decimals expands by 0.01)
    """
    if not filters:
        return None, None

    # osu! star ratings use 2 decimal place precision max
    SR_PRECISION = 0.01

    sr_min = None
    sr_max = None

    for key, operator, value, is_string, is_date in filters:
        # Only process SR filters (overall star rating)
        if key in ['sr', 'star', 'stars'] and not is_string and not is_date:
            if operator == '>':
                # Strict inequality: treat as >= value + precision
                adjusted_value = value + SR_PRECISION
                sr_min = adjusted_value if sr_min is None else max(sr_min, adjusted_value)
            elif operator == '>=':
                sr_min = value if sr_min is None else max(sr_min, value)
            elif operator == '<':
                # Strict inequality: treat as <= value - precision
                adjusted_value = value - SR_PRECISION
                sr_max = adjusted_value if sr_max is None else min(sr_max, adjusted_value)
            elif operator == '<=':
                sr_max = value if sr_max is None else min(sr_max, value)
            elif operator in ['=', '==', ':']:
                # For exact match, expand to next precision level
                # e.g., sr=7 becomes [7, 7.99], sr=7.1 becomes [7.1, 7.19], sr=7.12 becomes [7.12, 7.1299]

                # Check if value is a whole number (regardless of how it's stored as float)
                if value == int(value):
                    # Whole number: increment by 1.0
                    increment = 1.0
                else:
                    # Has decimal part: count decimal places from string representation
                    value_str = str(value)
                    if '.' in value_str:
                        # Remove trailing zeros for accurate decimal place count
                        decimal_part = value_str.split('.')[1].rstrip('0')
                        if decimal_part:
                            decimal_places = len(decimal_part)
                            increment = 10 ** (-decimal_places)
                        else:
                            # All zeros after decimal (e.g., 7.0) - treat as whole number
                            increment = 1.0
                    else:
                        increment = 1.0

                range_min = value
                # Subtract a small epsilon to make it an exclusive upper bound [min, max)
                # Use smaller epsilon than SR_PRECISION to avoid edge cases
                range_max = value + increment - 0.001

                sr_min = range_min if sr_min is None else max(sr_min, range_min)
                sr_max = range_max if sr_max is None else min(sr_max, range_max)

    return sr_min, sr_max


def apply_filter(stat_value, operator, value, is_string, is_date=False):
    """
    Apply a filter operation to a stat value.

    Args:
        stat_value: The value from the beatmap stats
        operator: The comparison operator (=, ==, :, !=, <, >, <=, >=)
        value: The value to compare against
        is_string: Whether this is a string filter (uses substring matching)
        is_date: Whether this is a date filter (uses range-based comparison)

    Returns:
        True if the filter passes, False otherwise
    """
    if stat_value is None:
        return False

    if is_date:
        # Date filters use range-based comparison
        # stat_value is in YYYY-MM-DD format from API
        # value could be YYYY, YYYY-MM, or YYYY-MM-DD
        start_date, end_date = parse_date_to_range(value)

        if operator in ['==', '=', ':']:
            # Check if stat_value is within the range
            return start_date <= stat_value <= end_date
        elif operator == '!=':
            # Check if stat_value is outside the range
            return not (start_date <= stat_value <= end_date)
        elif operator == '<':
            # Less than the start of the range
            return stat_value < start_date
        elif operator == '<=':
            # Less than or equal to the end of the range
            return stat_value <= end_date
        elif operator == '>':
            # Greater than the end of the range
            return stat_value > end_date
        elif operator == '>=':
            # Greater than or equal to the start of the range
            return stat_value >= start_date
    elif is_string:
        # String filters use substring matching
        string_funcs = {
            '!=': lambda x, y: y not in x,
            '==': lambda x, y: y in x,
            '=': lambda x, y: y in x,
            ':': lambda x, y: y in x
        }
        return string_funcs[operator](stat_value, value)
    else:
        # Numeric filters use standard comparison
        funcs = {
            '!=': lambda x, y: x != y,
            '>=': lambda x, y: x >= y,
            '<=': lambda x, y: x <= y,
            '==': lambda x, y: x == y,
            '>': lambda x, y: x > y,
            '<': lambda x, y: x < y,
            '=': lambda x, y: x == y,
            ':': lambda x, y: x == y
        }
        return funcs[operator](stat_value, value)
